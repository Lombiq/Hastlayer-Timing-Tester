using CommandLine;
using CommandLine.Text;
using HastlayerTimingTester.TimingTestConfigs;

namespace HastlayerTimingTester
{
    /// <summary>Parameters for the command-line argument parser (CommandLine).</summary>
    internal class ProgramParameters
    {
        [Option('p', "prepare", Required = false, DefaultValue = false,
            HelpText = "Generate VHDL files and batch file for next step.")]
        public bool Prepare { get; set; }

        [Option('e', "exec-sta", DefaultValue = false,
          HelpText = "Run vendor-provided compiler toolchain and static timing analysis software. " +
            "Note that you can do this manually by running the batch file. " +
            "This even allows you to run this step on another computer, although you have to give the paths " +
            "correctly in the configuration.")]
        public bool ExecSta { get; set; }

        [Option('a', "analyze", DefaultValue = false,
          HelpText = "Parse report files generated by vendor-provided compiler toolchain and " +
            "static timing analysis software, calculate timing parameters for Hastlayer.")]
        public bool Analyze { get; set; }

        [Option('x', "all", DefaultValue = false,
          HelpText = "Run all of the above.")]
        public bool All { get; set; }

        [Option('r', "all-remote-sta", DefaultValue = false,
          HelpText = "Run all of the above, except wait for the user to manually execute the -exec-sta step.")]
        public bool AllRemoteSta { get; set; }

        [ParserState]
        public IParserState LastParserState { get; set; }

        [HelpOption]
        public string GetUsage() =>
             HelpText.AutoBuild(this, (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));
    }

    class Program
    {
#pragma warning disable CS0162 // Unreachable code detected
        static void Main(string[] args)
        {
            const bool useInlineConfiguration = false;
            var parameters = new ProgramParameters();

            if (!useInlineConfiguration)
            {
                // This is a hack but I couldn't find an easy way to display the help if no parameters are present:

                if (args.Length == 0) args = new string[] { "--help" };
            }

            if (Parser.Default.ParseArguments(args, parameters))
            {
                if (useInlineConfiguration)
                {
                    // Uncomment the one you want to use if you don't want to supply parameters as command line arguments.
                    //parameters.Prepare = true;
                    //parameters.ExecSta = true;
                    //parameters.Analyze = true; 
                }

                new TimingTester(new NexysA7TimingTestConfig()).DoTests(parameters);
            }
        }
#pragma warning restore CS0162 // Unreachable code detected
    }
}
